<?php

/**
 * Generated by ZF2ModuleCreator
 */

namespace RequestLogger;

use Doctrine\Common\Persistence\ObjectManager;
use Doctrine\ODM\MongoDB\DocumentManager;
use RequestLogger\Document\RequestLog;
use RequestLogger\Mapper\LoggerMapper;
use ZaymigoUser\Entity\User;
use Zend\Di\ServiceLocator;
use Zend\Di\ServiceLocatorInterface;
use Zend\EventManager\EventInterface;
use Zend\ModuleManager\Feature\AutoloaderProviderInterface;
use Zend\ModuleManager\Feature\ConfigProviderInterface;
use Zend\Mvc\MvcEvent;
use Zend\ServiceManager\ServiceManager;


class Module implements AutoloaderProviderInterface, ConfigProviderInterface
{
    /**
     * Listen to the bootstrap event
     *
     * @param EventInterface|MvcEvent $e
     *
     * @return array
     */
    public function onBootstrap(EventInterface $e)
    {
        $eventManager = $e->getApplication()->getEventManager();
        $eventManager->attach(MvcEvent::EVENT_DISPATCH, [$this, 'putLog']);
    }

    /**
     * Returns configuration to merge with application configuration
     *
     * @return array|\Traversable
     */
    public function getConfig()
    {
        return include __DIR__ . '/config/module.config.php';
    }

    /**
     * Return an array for passing to Zend\Loader\AutoloaderFactory.
     *
     * @return array
     */
    public function getAutoloaderConfig()
    {
        return [
            'Zend\Loader\StandardAutoloader' => [
                'namespaces' => [
                    // Autoload all classes from namespace 'RequestLogger' from '/module/RequestLogger/src/RequestLogger'
                    __NAMESPACE__ => __DIR__ . '/src/' . __NAMESPACE__,
                ],
            ],
        ];
    }

    /**
     * @param \Zend\Mvc\MvcEvent $event
     */
    public function putLog(MvcEvent $event)
    {
        $app = $event->getApplication();
        /* @var $logger LoggerMapper */
        $logger = $app->getServiceManager()->get('LoggerMapper');
        $request = $app->getRequest();
        $authService = $app->getServiceManager()->get('ZaymigoUserService');
        $authService->authenticate();
        $user = $authService->getIdentity();
        if ($request instanceof \Zend\Http\Request && $user->getRole() !== User::ROLE_OPERATOR && $user->getId() != 1) {
            $testLog = new RequestLog();
            $testLog->setCreatedAt(time());
            $testLog->setURI($request->getUriString());
            $testLog->setMethod($request->getMethod());
            $testLog->setUserID($user->getId());
            $testLog->setHeaders($request->getHeaders()->toArray());

            if ($request->isGet()) {
                $testLog->setBody($request->getQuery()->toArray());
            }
            if ($request->isPost()) {

                $testLog->setBody($request->getPost()->toArray());
            }
            $logger->save($testLog);
        }

    }

    /**
     * @return array
     */
    public function getServiceConfig()
    {
        return [
            //Our Entry takes not parameters
            'invokables' => [
                'RequestLog' => 'RequestLogger\Document\RequestLog',
                'User'       => 'RequestLogger\Document\User',
            ],
            'factories'  => [
                //But the mapper has some dependencies which can be injected in
                'LoggerMapper' => function ($sm) {
                    /* @var $sm ServiceManager*/
                    /* @var $dm ObjectManager*/
                    $dm = $sm->get('doctrine.documentmanager.odm_default');

                    return new LoggerMapper($dm, $dm->getRepository('RequestLogger\Document\RequestLog'));
                },
            ],
            //The Entry entity should be unique
            'shared'     => [
                'RequestLog' => false,
                'User'       => false,
            ],
        ];
    }

}